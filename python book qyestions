“””Created on Friday May 11:10:09 2022
@author : samin asghari”””

#1) yes,a python list can hold a mixture of integers and strings.
#2)According to the table, the negative index does the opposite the elements are numbered from the end to the beginning.
#3) list =[45,-3,16,8]

#4)    (a) =lst[0],lst[-4]  / (b)=lst[3],lst[-1]   / (c) =lst[0]= 10,   (d) =lst[3]=29 , e=lst[1]=-4 , (f)= lst[-1]=29   ,(g)=lst[-4]=10   ,(h)=legal,because list indices must be integers or slices, not float

#5)    (a)=3,    (b)=5  , (c)=1 ,  (d)=5 ,  (e)=5  , (f)=2,  (g)=0, (h)=3  or  0
#6) len(list)function 

#7)square backets witch is: []

#8) 
 (a)= [20, 1, -34, 40, -8, 60, 1, 3]  ,  (b)= [20, 1, -34]  , (c)= [-8, 60, 1, 3]  , (d)= [-8, 60, 1, 3]  ,  (e)= [40, -8,]
      (f)= [20, 1, -34] ,  (g)= [-8, 60, 1, 3]  , (h)= [20, 1, -34, 40, -8, 60, 1, 3] ,  (i)= [20, 1, -34, 40]  , (j)= [1, -34, 40, -8] ,  (k)=TRUE  , (L)=FALSE ,   (m)=8
#9)(1);
 A = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20] ==> A[0:5] ==> [2, 4, 6, 8, 10]
A = [-10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10] ==> A[6:11] ==> [2, 4, 6, 8, 10]
A = [2, 3, 4, 5, 6, 7, 8, 10] ==> A[0:7:2] + A[7:] ==>! [2, 4, 6, 8, 10]
A = [2, 4, 6, 'a', 'b', 'c', 8, 10] ==> A[0:3] + A[6:] ==> [2, 4, 6, 8, 10]
A = [2, 4, 6, 8, 10] ==> A[0:5] ==> [2, 4, 6, 8, 10]
A = [] ==> IMPOSSIBLE !! HOWEVER => A[0:] + [2, 4, 6, 8, 10] ==> [2, 4, 6, 8, 10]
A = [10, 8, 6, 4, 2] ==> A[-1:-6:-1] ==> [2…
A = [2, 4, 6] ==> A[0:3] ==> [2,4,6,8,10]
A = [6,8,10] ==> A[2:5] ==> [2,4,6,8,19]
A = [2,10] ==> A[0] + A[4] ==> [2,4,6,8,10]
A = [4,6,8] ==> A[1:4] ==> [2,4,6,8,10]

#9 (2);
  m  n
1.5  9
2.-5 -10
3.1  7
4.3  7
5.-
6.0  4
7.0  4
8.3  4  
9.0  1
10.1  3
11.0  4

#10)
       (a) : [8]*4 ==> [8,8,8,8]                                                (b) : 6 *[2,7] ==> [2, 7, 2, 7, 2, 7, 2, 7, 2, 7, 2, 7]
       (c) : [1, 2, 3] + ['a', 'b', 'c', 'd'] ==>[1, 2, 3, 'a', 'b', 'c', 'd']
       (d) : 3 * [1, 2] + [4, 2]==> [1, 2, 1, 2, 1, 2, 4, 2]          (e) : 3 * ([1, 2] + [4, 2])==> [1, 2, 4, 2, 1, 2, 4, 2, 1, 2, 4, 2]

#11)
      (a): [3, 5, 7, 9]                                                        (b): [50, 60, 70, 80, 90]                 (c): [12, 15, 18]
      (d):  [(0, 0), (0, 1), (0, 2), (0, 3), (1, 0), (1, 1), (1, 2), (1, 3), (2, 0), (2, 1), (2, 2), (2, 3)]
      (e): [(0, 0), (0, 2), (1, 1), (1, 3), (2, 0), (2, 2)]

#12) (a) = [x**2 for x in range (1,6)]
     (a): [x+2 for x in[-1,2,7,14,23]]                                            (b): [x+0.25 for x in[0,0.25,0.5,0.75,1,1.25]]
     (c): [(x,y) for x in ['a','b'] for y in range (3)]

#13) We can use the Python in operator to determine if an object is an element in a list.
If lst is a list, the expression x in lst evaluates to True if x in an element in lst; otherwise, the expression is False.
Similarly, the expression x not in lst evaluates to True if x is not an element in lst; otherwise, the expression is False.

#14) Using the reverse() method we can reverse the contents of the list object in-place i.e., we don't need to create a new list instead we just copy the existing elements to the original list in reverse order. This method directly modifies the original list.
#15)(1):
   a=[3,-3,5,2,-1]
def sum_positive(a):
    s = 0 
    for x in a:
        if x > 0:
            s = s + x
    print (s)
(2):
a = [3, -3, 5, 2, -1, 2]
def sum_positive(a):
    sum = 0
    for i in a:
        if i > -1:
            sum = sum + i
    print(sum)
sum_positive(a)

#16)(1):
   lst=[3,5,4,-1,0]
def count_evens(lst):
    c = 0
    for x in lst:
        if x % 2 == 0:
            c = c + 1
    print (c)
(2):
lst = [3,5,4,-1,0]
def count_evens(lst):
    evens_num = 0
    for i in lst:
        if i % 2 == 0:
            evens_num = evens_num + 1
    print(evens_num)
count_evens(lst)

#17)(1): 
def print_big_enough(List,secnum):
    for x in List:
        if x >= secnum:
            print (x)
(2):
lst = [1, 2, 3, 4, 5, 6]
num = 2
def print_big_enough(lst, num):
    sliced_lst = []
    for i in lst:
        if i >= num:
            sliced_lst += [i]
     print(sliced_lst)
print_big_enough(lst, num)


#18) 
def next_number(lst):
    for x in lst:
        if x <= 0 or (len(set(lst))!=len(lst)):
            print("ERROR! Enter unique list with numbers higher than or equal to 1!")
():
lst = [5, 3, 1]


def next_number(lst):
    mymax = 0
    num = 0
    for i in lst:
        if i > mymax:
            mymax = i
for i in range(1, mymax + 1):
        if i not in lst:
            return i
 return mymax + 1
print(next_number(lst))

#19) 
names = ["samin", "ali", "ehsan", "roya" ,"mehdi"]
names.reverse()
print( names )

or
mylist = ['samin', 'ali', 'ehsan', 'roya']
def reverse(mylist):
    mylist2 = []
    for item in mylist:
        mylist2.insert(0, item)
    return mylist2
print(reverse(mylist))

#20)
def matrix(satr,sotoon):
    result = []
    for i in range(satr):
        partial_result = []
        for i in range(sotoon):
            partial_result.append(1)
        result.append(partial_result)

    return result

m = matrix(6, 9)
for i in m:
    print(i)

m[2][4] = 0
print("---------------------------")
for i in m:
    print(i)
    
 #21)
 
1:     lst=[1,2,3,4,5,6,7,8,9,10]                 , 2:  L=  lst(range(1,11,1)
3:     lst= [x for x in range(1,11) if  x%2 ==0]
4:    L= lst(range(1,8,1)) + [8,9,10]
5:     def fourth_way():
    b = [-10, -9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
    a = (b[3:13])
    print(a)  

6: L=[]
For i in range(1,11,1):
         L+= [i]
L=[1,2,3,4,5,6,7,8,9,10]
7:
def third_way():
    a = []
    i = 1
    while i < 11:
        a.append(i)
        i += 1
    print(a)

#22) lst2D = [[], []]
size = int(input("enter size of matrix : "))
ii = 0
ltstest = [[0, 1], [3, 4]]
# print(ltstest[0][1])
condition = size ** 2
print(size)
for i in range(0, size):
    print(i)
    # lst2D.insert([0][1], i)

# while i < size:
#     # lst2D[i][i] = i
#      i += 1
#     print(i)
print(lst2D)
""" i cant :)))) """

#23)

game = [['x', 'o', 'o'],
        ['x', 'o', 'o'],
        ['x', 'o', 'o']]

#for row in game:
    #print(row)


def check_winner(game):
    # satr
    if game[0][0] == game[0][1] and game[0][0] == game[0][2] and game[0][1] == game[0][2] and game[0][0] == 'x':
        result = 'x'
        return result
    if game[1][0] == game[1][1] and game[1][0] == game[1][2] and game[1][1] == game[1][2] and game[1][0] == 'x':
        result = 'x'
        return result
    if game[2][0] == game[2][1] and game[2][0] == game[2][2] and game[2][1] == game[0][2] and game[2][0] == 'x':
        result = 'x'
        return result
    # soton
    if game[0][0] == game[1][0] and game[1][0] == game[2][0] and game[0][0] == game[2][0] and game[0][0] == 'x':
        result = 'x'
        return result

    if game[0][1] == game[1][1] and game[1][1] == game[2][1] and game[0][1] == game[2][1] and game[0][1] == 'x':
        result = 'x'
        return result

    if game[0][2] == game[1][2] and game[1][2] == game[2][2] and game[0][2] == game[2][2] and game[0][2] == 'x':
        result = 'x'
        return result
    # ghotr
    if game[0][0] == game[1][1] and game[1][1] == game[2][2] and game[0][0] == game[2][2] and game[0][0] == 'x':
        result = 'x'
        return result
    if game[0][2] == game[1][1] and game[1][1] == game[2][0] and game[0][2] == game[2][0] and game[0][2] == 'x':
        result = 'x'
        return result
        # satr
    if game[0][0] == game[0][1] and game[0][0] == game[0][2] and game[0][1] == game[0][2] and game[0][0] == 'o':
        result = 'o'
        return result
    if game[1][0] == game[1][1] and game[1][0] == game[1][2] and game[1][1] == game[1][2] and game[1][0] == 'o':
        result = 'o'
        return result
    if game[2][0] == game[2][1] and game[2][0] == game[2][2] and game[2][1] == game[0][2] and game[2][0] == 'o':
        result = 'o'
        return result
        # soton
    if game[0][0] == game[1][0] and game[1][0] == game[2][0] and game[0][0] == game[2][0] and game[0][0] == 'o':
        result = 'o'
        return result

    if game[0][1] == game[1][1] and game[1][1] == game[2][1] and game[0][1] == game[2][1] and game[0][1] == 'o':
        result = 'o'
        return result

    if game[0][2] == game[1][2] and game[1][2] == game[2][2] and game[0][2] == game[2][2] and game[0][2] == 'o':
        result = 'o'
        return result
        # ghotr
    if game[0][0] == game[1][1] and game[1][1] == game[2][2] and game[0][0] == game[2][2] and game[0][0] == 'o':
        result = 'o'
        return result
    if game[0][2] == game[1][1] and game[1][1] == game[2][0] and game[0][2] == game[2][0] and game[0][2] == 'o':
        result = 'o'
        return result
    else:
        result = ' '
        return result


print(check_winner(game))
